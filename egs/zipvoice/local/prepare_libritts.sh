#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
export PYTHONPATH=../../:$PYTHONPATH

set -eou pipefail

stage=1
stop_stage=5
sampling_rate=24000
nj=32
feature_type=bigvgan_v2

dl_dir=$PWD/download

. utils/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded it to /path/to/LibriTTS,
  # you can create a symlink
  #
  #   ln -sfv /path/to/LibriTTS $dl_dir/LibriTTS
  #
  if [ ! -d $dl_dir/LibriTTS ]; then
    lhotse download libritts $dl_dir
  fi

fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare LibriTTS manifest"
  # We assume that you have downloaded the LibriTTS corpus
  # to $dl_dir/LibriTTS

  # We did not add tokens to this manifest, as on-the-fly 
  # tokenization with LibriTTSTokenizer is not slow.
  mkdir -p data/manifests
  if [ ! -e data/manifests/.libritts.done ]; then
    lhotse prepare libritts --num-jobs ${nj} $dl_dir/LibriTTS data/manifests
    touch data/manifests/.libritts.done
  fi
fi

feature_dir=data/fbank-${feature_type}

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Compute Fbank for LibriTTS"
  mkdir -p $feature_dir

  if [ ! -e $feature_dir/.libritts.done ]; then
    for subset in train-clean-100 train-clean-360 train-other-500 dev-clean test-clean; do
      python3 -m zipvoice.bin.compute_fbank \
        --source-dir data/manifests \
        --dest-dir $feature_dir \
        --dataset libritts \
        --subset ${subset} \
        --sampling-rate $sampling_rate \
        --num-jobs ${nj} \
        --type $feature_type
    done
    touch $feature_dir/.libritts.done
  fi

  # Here we shuffle and combine the train-clean-100, train-clean-360 and
  # train-other-500 together to form the training set.
  if [ ! -f $feature_dir/libritts_cuts_train-all-shuf.jsonl.gz ]; then
    cat <(gunzip -c $feature_dir/libritts_cuts_train-clean-100.jsonl.gz) \
      <(gunzip -c $feature_dir/libritts_cuts_train-clean-360.jsonl.gz) \
      <(gunzip -c $feature_dir/libritts_cuts_train-other-500.jsonl.gz) | \
      shuf | gzip -c > $feature_dir/libritts_cuts_train-all-shuf.jsonl.gz
  fi


  if [ ! -e $feature_dir/.libritts-validated.done ]; then
    log "Validating $feature_dir for LibriTTS"
    python3 ./utils/validate_manifest.py \
      $feature_dir/libritts_cuts_train-all-shuf.jsonl.gz
    touch $feature_dir/.libritts-validated.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Generate token file"
  if [ ! -e data/tokens_libritts.txt ]; then
    python3 ./local/prepare_token_file_char.py \
      --manifest $feature_dir/libritts_cuts_train-all-shuf.jsonl.gz \
      --tokens data/tokens_libritts.txt
  fi
fi
